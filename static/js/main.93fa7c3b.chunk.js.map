{"version":3,"sources":["components/Titles.jsx","store/actions.jsx","components/Form.jsx","components/Weather.jsx","App.jsx","store/reducers.jsx","store/index.jsx","serviceWorker.js","index.js"],"names":["Titles","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","Component","fetchdata","city","country","dispatch","getState","console","log","axios","get","concat","then","res","data","type","payload","catch","err","Form","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","state","handleClick","e","preventDefault","props","handleChange","setState","defineProperty","target","name","class","onSubmit","onChange","placeholder","connect","temperature","humidity","description","App","components_Titles","components_Form","components_Weather","initState","error","reducer","undefined","action","newtemp","main","temp","newcity","newcountry","sys","newhumid","newdescription","weather","objectSpread","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93fa7c3b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Titles extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"title-container__title\">Weather Finder</h1>\n        <p className=\"title-container__subtitle\"> Find out temprature, conditions and more ...</p>\n      </div>\n    )\n  }\n}\n\nexport default Titles\n","import axios from \"axios\";\n\nconst API_KEY = \"c9b323a281f84eac54c144c62053dc1d\"\nexport const ADD_CITY_DATA='addcitydata'\n\n\n\nexport const cityWeather = (data) => {\n    return {\n        type:ADD_CITY_DATA,\n        payload:data\n    }\n}\n\n\nexport const fetchdata = (city, country) => (dispatch, getState) => {\n    console.log('info',city, ' ',country)\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`)\n    .then(res => {\n      console.log(res.data)\n      dispatch(cityWeather(res.data))\n    })\n    .catch(err=> console.log(err))\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport {fetchdata} from '../store/actions'\nexport class Form extends Component {\n  \n  state = {\n      city:'',\n      country:''\n  }\n  \n  handleClick = (e) => {\n    e.preventDefault();\n    console.log('instate', this.state.city, this.state.country)\n    if(this.state.city && this.state.country){\n        this.props.dispatch(fetchdata(this.state.city, this.state.country))\n    }\n    \n  }\n\n  handleChange = (e) => {\n      this.setState({[e.target.name] : e.target.value  });\n  }\n  \n   render() {\n    return (\n        <div class=\"container\">\n            <form onSubmit={this.handleClick}>\n                <div class=\"form-group\">\n                    <input onChange={this.handleChange} type=\"text\" name=\"city\" class=\"form-control\" placeholder=\"City...\"/>\n                </div>\n                <div class=\"form-group\">\n                    <input onChange={this.handleChange} type=\"text\" name=\"country\" class=\"form-control\" placeholder=\"Country...\"/>\n                </div>\n                <button class=\"btn btn-primary\">Submit</button>\n            </form>\n      </div>    \n    )\n  }\n}\n\nexport default connect()(Form)\n","import React from 'react'\nimport { connect } from 'react-redux';\n\nconst Weather = (props) => {\n    return (\n      <div className=\"weather__info\">\n        {\n          props.data.temperature && <p className=\"weather__key\">Temprature: <span>{props.data.temperature}</span></p> \n        } \n        {\n          props.data.city && props.data.country && <p className=\"weather__key\">Location: \n          <span>{props.data.city}, {props.data.country}</span></p>\n        } \n        {\n          props.data.humidity && <p className=\"weather__key\">Humidity: <span>{props.data.humidity}</span></p> \n        } \n        {\n          props.data.description && <p className=\"weather__key\">Description: <span>{props.data.description}</span></p>\n        }  \n      </div>\n    )\n  \n}\n\nconst mapStateToProps = (state) => {\n  return{\n    data: state\n  }\n}\nexport default connect(mapStateToProps)(Weather)\n","import React, { Component } from 'react';\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport './App.css';\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n       \n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-md-5 title-container\">\n                    <Titles/>\n                </div>\n                    \n                <div className=\"col-md-7 form-container\">\n                    <Form/>\n                    <Weather/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n       \n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ADD_CITY_DATA} from './actions';\n\nconst initState = {\n    temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n}\n\nconst reducer = (state=initState, action) => {\n    console.log('in rducer', action.payload)\n    \n    switch(action.type){\n        case ADD_CITY_DATA:\n            const newtemp = action.payload.main.temp;\n            const newcity = action.payload.name;\n            const newcountry = action.payload.sys.country;\n            const newhumid = action.payload.main.humidity;\n            const newdescription = action.payload.weather[0].description;\n            return {\n                ...state,\n                temperature:newtemp,\n                city: newcity,\n                country: newcountry,\n                humidity:newhumid,\n                description: newdescription\n            }\n        default:\n            return state\n    }\n\n}\n\n\nexport default reducer","import { createStore, applyMiddleware } from 'redux';\nimport reducer from \"./reducers\";\nimport thunk from 'redux-thunk'\n\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}>\n                <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}